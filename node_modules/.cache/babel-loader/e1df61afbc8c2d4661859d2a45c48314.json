{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer } from \"./actions/productReducers\";\nimport { cartReducers } from \"./actions/cartReducers\";\nimport { userLoginReducer } from \"./actions/userReducers\";\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducers,\n  userLogin: userLoginReducer,\n  userDetails: userDetailsReducer\n}); //storing backend products/:id property in cartItems state\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\n: [];\nconsole.log(\"This is an\", typeof cartItemsFromStorage); // if we have a userInfo in storage, then convert to an object for us to use\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null; //Putting the cartItems in a global state\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconsole.log(initialState.cart);\nconsole.log(initialState.userLogin);\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducers","userLoginReducer","reducer","productList","productDetails","cart","userLogin","userDetails","userDetailsReducer","cartItemsFromStorage","localStorage","getItem","JSON","parse","console","log","userInfoFromStorage","initialState","cartItems","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,kBADD,EAECC,qBAFD,QAGO,2BAHP;AAIA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,MAAMC,OAAO,GAAGR,eAAe,CAAC;AAC/BS,EAAAA,WAAW,EAAEL,kBADkB;AAE/BM,EAAAA,cAAc,EAAEL,qBAFe;AAG/BM,EAAAA,IAAI,EAAEL,YAHyB;AAI/BM,EAAAA,SAAS,EAAEL,gBAJoB;AAK/BM,EAAAA,WAAW,EAAEC;AALkB,CAAD,CAA/B,C,CAQA;;AACA,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAD0B,CACoB;AADpB,EAE1B,EAFH;AAGAG,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,OAAON,oBAAjC,E,CAEA;;AACA,MAAMO,mBAAmB,GAAGN,YAAY,CAACC,OAAb,CAAqB,UAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADyB,GAEzB,IAFH,C,CAIA;;AACA,MAAMM,YAAY,GAAG;AACpBZ,EAAAA,IAAI,EAAE;AAAEa,IAAAA,SAAS,EAAET;AAAb,GADc;AAEpBH,EAAAA,SAAS,EAAE;AAAEa,IAAAA,QAAQ,EAAEH;AAAZ;AAFS,CAArB;AAIAF,OAAO,CAACC,GAAR,CAAYE,YAAY,CAACZ,IAAzB;AACAS,OAAO,CAACC,GAAR,CAAYE,YAAY,CAACX,SAAzB;AACA,MAAMc,UAAU,GAAG,CAACxB,KAAD,CAAnB;AACA,MAAMyB,KAAK,GAAG5B,WAAW,CACxBS,OADwB,EAExBe,YAFwB,EAGxBpB,mBAAmB,CAACF,eAAe,CAAC,GAAGyB,UAAJ,CAAhB,CAHK,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n\tproductListReducer,\r\n\tproductDetailsReducer,\r\n} from \"./actions/productReducers\";\r\nimport { cartReducers } from \"./actions/cartReducers\";\r\nimport { userLoginReducer } from \"./actions/userReducers\";\r\nconst reducer = combineReducers({\r\n\tproductList: productListReducer,\r\n\tproductDetails: productDetailsReducer,\r\n\tcart: cartReducers,\r\n\tuserLogin: userLoginReducer,\r\n\tuserDetails: userDetailsReducer,\r\n});\r\n\r\n//storing backend products/:id property in cartItems state\r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n\t? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\r\n\t: [];\r\nconsole.log(\"This is an\", typeof cartItemsFromStorage);\r\n\r\n// if we have a userInfo in storage, then convert to an object for us to use\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n\t? JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\t: null;\r\n\r\n//Putting the cartItems in a global state\r\nconst initialState = {\r\n\tcart: { cartItems: cartItemsFromStorage },\r\n\tuserLogin: { userInfo: userInfoFromStorage },\r\n};\r\nconsole.log(initialState.cart);\r\nconsole.log(initialState.userLogin);\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}