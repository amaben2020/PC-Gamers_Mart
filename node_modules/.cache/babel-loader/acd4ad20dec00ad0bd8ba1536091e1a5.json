{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS, USER_REGISTER_REQUEST, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_DETAILS_REQUEST, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_DETAILS_RESET, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL } from \"./../constants/userConstants\";\nimport axios from \"axios\";\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\nimport { CART_ITEM_RESET } from \"./../constants/cartConstants\";\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_LOGIN_REQUEST\n  });\n\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \" application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      email,\n      password,\n      config\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    console.log(data);\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n};\nexport const register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST\n  });\n\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \" application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users\", {\n      name,\n      email,\n      password,\n      config\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    console.log(data);\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n}; //we need to getState cos we need the userInfo (token)\n//The id below is just a parameter where we would fill in profile route, this makes us navigate to that route\n\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    }); // const userInfo = getState().userLogin.userInfo;\n    //getting the userInfo i.e Token from state so you could access the user's profile\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //console.log(userInfo); GETs the entire user details in Database createdAt: \"2021-03-16T10:11:06.029Z\"\n    //email: \"jane@example.com\";\n    //isAdmin: false;\n    //name: \"Jane Doe\";\n    //password: \"$2a$10$FQVJOoWGREin5tE3XRvRguXGURg0Zi5nVaxI6BNVpGBUouuMeTOJG\";\n    //updatedAt: \"2021-03-16T10:11:06.029Z\";\n    //__v: 0;\n    //_id: \"6050843a7d68cf4404a0323e\";\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  dispatch({\n    type: USER_UPDATE_PROFILE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n}; //Listing all users for the admin\n\nexport const listUsers = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_LIST_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    };\n    const {\n      data\n    } = await axios.get(\"/api/users\", config); //\tconsole.log(data); The type of data we receive\n    //createdAt: \"2021-03-16T10:11:06.029Z\"\n    //email: \"jane@example.com\"\n    //isAdmin: false\n    //name: \"Jane Doe\"\n    //password: \"$2a$10$FQVJOoWGREin5tE3XRvRguXGURg0Zi5nVaxI6BNVpGBUouuMeTOJG\"\n    //updatedAt: \"2021-03-16T10:11:06.029Z\"\n    //__v: 0\n    //_id: \"6050843a7d68cf4404a0323e\"\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error\n    });\n  }\n};\nexport const deleteUser = id => async (dispatch, getState) => {\n  dispatch({\n    type: USER_DELETE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; //no need for data, we just want a successful deletion\n\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  dispatch({\n    type: USER_UPDATE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; //no need for data, we just want a successful deletion\n\n    await axios.delete(`/api/users/${user}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: CART_ITEM_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n  localStorage.removeItem(\"userInfo\");\n  localStorage.removeItem(\"cartItems\");\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/actions/userActions.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","USER_REGISTER_REQUEST","USER_DETAILS_FAIL","USER_DETAILS_SUCCESS","USER_DETAILS_REQUEST","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_DETAILS_RESET","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","axios","ORDER_LIST_MY_RESET","CART_ITEM_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","console","log","localStorage","setItem","JSON","stringify","error","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","USER_UPDATE_REQUEST","logout","removeItem"],"mappings":"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","sourcesContent":["import {\r\n\tUSER_LOGIN_REQUEST,\r\n\tUSER_LOGIN_SUCCESS,\r\n\tUSER_LOGIN_FAIL,\r\n\tUSER_LOGOUT,\r\n\tUSER_REGISTER_FAIL,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_DETAILS_FAIL,\r\n\tUSER_DETAILS_SUCCESS,\r\n\tUSER_DETAILS_REQUEST,\r\n\tUSER_UPDATE_PROFILE_REQUEST,\r\n\tUSER_UPDATE_PROFILE_SUCCESS,\r\n\tUSER_UPDATE_PROFILE_FAIL,\r\n\tUSER_DETAILS_RESET,\r\n\tUSER_LIST_REQUEST,\r\n\tUSER_LIST_SUCCESS,\r\n\tUSER_LIST_FAIL,\r\n\tUSER_LIST_RESET,\r\n\tUSER_DELETE_REQUEST,\r\n\tUSER_DELETE_SUCCESS,\r\n\tUSER_DELETE_FAIL,\r\n} from \"./../constants/userConstants\";\r\nimport axios from \"axios\";\r\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\r\nimport { CART_ITEM_RESET } from \"./../constants/cartConstants\";\r\nexport const login = (email, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_LOGIN_REQUEST });\r\n\ttry {\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \" application/json\",\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.post(\"/api/users/login\", {\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\tconfig,\r\n\t\t});\r\n\r\n\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\t\tconsole.log(data);\r\n\t\tlocalStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_LOGIN_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_REGISTER_REQUEST });\r\n\ttry {\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \" application/json\",\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.post(\"/api/users\", {\r\n\t\t\tname,\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\tconfig,\r\n\t\t});\r\n\r\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\t\tconsole.log(data);\r\n\t\tlocalStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_REGISTER_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\n//we need to getState cos we need the userInfo (token)\r\n//The id below is just a parameter where we would fill in profile route, this makes us navigate to that route\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_DETAILS_REQUEST });\r\n\t\t// const userInfo = getState().userLogin.userInfo;\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\t\t//console.log(userInfo); GETs the entire user details in Database createdAt: \"2021-03-16T10:11:06.029Z\"\r\n\t\t//email: \"jane@example.com\";\r\n\t\t//isAdmin: false;\r\n\t\t//name: \"Jane Doe\";\r\n\t\t//password: \"$2a$10$FQVJOoWGREin5tE3XRvRguXGURg0Zi5nVaxI6BNVpGBUouuMeTOJG\";\r\n\t\t//updatedAt: \"2021-03-16T10:11:06.029Z\";\r\n\t\t//__v: 0;\r\n\t\t//_id: \"6050843a7d68cf4404a0323e\";\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.get(`/api/users/${id}`, config);\r\n\r\n\t\tdispatch({ type: USER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_DETAILS_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_UPDATE_PROFILE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.put(`/api/users/profile`, user, config);\r\n\r\n\t\tdispatch({ type: USER_UPDATE_PROFILE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_UPDATE_PROFILE_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\n//Listing all users for the admin\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_LIST_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.get(\"/api/users\", config);\r\n\t\t//\tconsole.log(data); The type of data we receive\r\n\t\t//createdAt: \"2021-03-16T10:11:06.029Z\"\r\n\t\t//email: \"jane@example.com\"\r\n\t\t//isAdmin: false\r\n\t\t//name: \"Jane Doe\"\r\n\t\t//password: \"$2a$10$FQVJOoWGREin5tE3XRvRguXGURg0Zi5nVaxI6BNVpGBUouuMeTOJG\"\r\n\t\t//updatedAt: \"2021-03-16T10:11:06.029Z\"\r\n\t\t//__v: 0\r\n\t\t//_id: \"6050843a7d68cf4404a0323e\"\r\n\t\tdispatch({ type: USER_LIST_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_LIST_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_DELETE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//no need for data, we just want a successful deletion\r\n\t\tawait axios.delete(`/api/users/${id}`, config);\r\n\r\n\t\tdispatch({ type: USER_DELETE_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_DELETE_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_UPDATE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//no need for data, we just want a successful deletion\r\n\t\tawait axios.delete(`/api/users/${user}`, config);\r\n\r\n\t\tdispatch({ type: USER_DELETE_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_DELETE_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tdispatch({ type: USER_LOGOUT });\r\n\tdispatch({ type: USER_DETAILS_RESET });\r\n\tdispatch({ type: ORDER_LIST_MY_RESET });\r\n\tdispatch({ type: CART_ITEM_RESET });\r\n\tdispatch({ type: USER_LIST_RESET });\r\n\tlocalStorage.removeItem(\"userInfo\");\r\n\tlocalStorage.removeItem(\"cartItems\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}