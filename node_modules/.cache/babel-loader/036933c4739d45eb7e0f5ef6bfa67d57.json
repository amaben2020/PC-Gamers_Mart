{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer } from \"./actions/productReducers\";\nimport { cartReducers } from \"./actions/cartReducers\";\nimport { userLoginReducer, userDetailsReducer, userRegisterReducer, userUpdateProfileReducer } from \"./actions/userReducers\";\nimport { orderReducers } from \"./actions/orderReducers\";\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducers,\n  userLogin: userLoginReducer,\n  userDetails: userDetailsReducer,\n  userRegister: userRegisterReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  order: orderReducers\n}); //storing backend products/:id property in cartItems state\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\n: []; // if we have a userInfo in storage, then convert to an object for us to use\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null;\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {}; //Putting the cartItems in a global state\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAdd: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconsole.log(initialState.cart.cartItems);\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducers","userLoginReducer","userDetailsReducer","userRegisterReducer","userUpdateProfileReducer","orderReducers","reducer","productList","productDetails","cart","userLogin","userDetails","userRegister","userUpdateProfile","order","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAdd","userInfo","console","log","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,kBADD,EAECC,qBAFD,QAGO,2BAHP;AAIA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SACCC,gBADD,EAECC,kBAFD,EAGCC,mBAHD,EAICC,wBAJD,QAKO,wBALP;AAMA,SAASC,aAAT,QAA8B,yBAA9B;AACA,MAAMC,OAAO,GAAGZ,eAAe,CAAC;AAC/Ba,EAAAA,WAAW,EAAET,kBADkB;AAE/BU,EAAAA,cAAc,EAAET,qBAFe;AAG/BU,EAAAA,IAAI,EAAET,YAHyB;AAI/BU,EAAAA,SAAS,EAAET,gBAJoB;AAK/BU,EAAAA,WAAW,EAAET,kBALkB;AAM/BU,EAAAA,YAAY,EAAET,mBANiB;AAO/BU,EAAAA,iBAAiB,EAAET,wBAPY;AAQ/BU,EAAAA,KAAK,EAAET;AARwB,CAAD,CAA/B,C,CAWA;;AACA,MAAMU,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAD0B,CACoB;AADpB,EAE1B,EAFH,C,CAIA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADyB,GAEzB,IAFH;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAChCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADgC,GAEhC,EAFH,C,CAIA;;AACA,MAAMK,YAAY,GAAG;AACpBb,EAAAA,IAAI,EAAE;AACLc,IAAAA,SAAS,EAAER,oBADN;AAELS,IAAAA,WAAW,EAAEH;AAFR,GADc;AAKpBX,EAAAA,SAAS,EAAE;AAAEe,IAAAA,QAAQ,EAAEL;AAAZ;AALS,CAArB;AAOAM,OAAO,CAACC,GAAR,CAAYL,YAAY,CAACb,IAAb,CAAkBc,SAA9B;AAEA,MAAMK,UAAU,GAAG,CAAChC,KAAD,CAAnB;AACA,MAAMiC,KAAK,GAAGpC,WAAW,CACxBa,OADwB,EAExBgB,YAFwB,EAGxBzB,mBAAmB,CAACF,eAAe,CAAC,GAAGiC,UAAJ,CAAhB,CAHK,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n\tproductListReducer,\r\n\tproductDetailsReducer,\r\n} from \"./actions/productReducers\";\r\nimport { cartReducers } from \"./actions/cartReducers\";\r\nimport {\r\n\tuserLoginReducer,\r\n\tuserDetailsReducer,\r\n\tuserRegisterReducer,\r\n\tuserUpdateProfileReducer,\r\n} from \"./actions/userReducers\";\r\nimport { orderReducers } from \"./actions/orderReducers\";\r\nconst reducer = combineReducers({\r\n\tproductList: productListReducer,\r\n\tproductDetails: productDetailsReducer,\r\n\tcart: cartReducers,\r\n\tuserLogin: userLoginReducer,\r\n\tuserDetails: userDetailsReducer,\r\n\tuserRegister: userRegisterReducer,\r\n\tuserUpdateProfile: userUpdateProfileReducer,\r\n\torder: orderReducers,\r\n});\r\n\r\n//storing backend products/:id property in cartItems state\r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n\t? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\r\n\t: [];\r\n\r\n// if we have a userInfo in storage, then convert to an object for us to use\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n\t? JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\t: null;\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")\r\n\t? JSON.parse(localStorage.getItem(\"shippingAddress\"))\r\n\t: {};\r\n\r\n//Putting the cartItems in a global state\r\nconst initialState = {\r\n\tcart: {\r\n\t\tcartItems: cartItemsFromStorage,\r\n\t\tshippingAdd: shippingAddressFromStorage,\r\n\t},\r\n\tuserLogin: { userInfo: userInfoFromStorage },\r\n};\r\nconsole.log(initialState.cart.cartItems);\r\n\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}