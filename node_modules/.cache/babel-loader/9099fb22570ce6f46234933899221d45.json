{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer } from \"./actions/productReducers\";\nimport { cartReducers } from \"./actions/cartReducers\";\nimport { userLoginReducer, userDetailsReducer, userRegisterReducer, userUpdateProfileReducer } from \"./actions/userReducers\";\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducers,\n  userLogin: userLoginReducer,\n  userDetails: userDetailsReducer,\n  userRegister: userRegisterReducer,\n  userUpdateProfile: userUpdateProfileReducer\n}); //storing backend products/:id property in cartItems state\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\n: []; // if we have a userInfo in storage, then convert to an object for us to use\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null; //Putting the cartItems in a global state\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconsole.log(initialState.userLogin.userInfo);\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducers","userLoginReducer","userDetailsReducer","userRegisterReducer","userUpdateProfileReducer","reducer","productList","productDetails","cart","userLogin","userDetails","userRegister","userUpdateProfile","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","cartItems","userInfo","console","log","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,kBADD,EAECC,qBAFD,QAGO,2BAHP;AAIA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SACCC,gBADD,EAECC,kBAFD,EAGCC,mBAHD,EAICC,wBAJD,QAKO,wBALP;AAMA,MAAMC,OAAO,GAAGX,eAAe,CAAC;AAC/BY,EAAAA,WAAW,EAAER,kBADkB;AAE/BS,EAAAA,cAAc,EAAER,qBAFe;AAG/BS,EAAAA,IAAI,EAAER,YAHyB;AAI/BS,EAAAA,SAAS,EAAER,gBAJoB;AAK/BS,EAAAA,WAAW,EAAER,kBALkB;AAM/BS,EAAAA,YAAY,EAAER,mBANiB;AAO/BS,EAAAA,iBAAiB,EAAER;AAPY,CAAD,CAA/B,C,CAUA;;AACA,MAAMS,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAD0B,CACoB;AADpB,EAE1B,EAFH,C,CAIA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADyB,GAEzB,IAFH,C,CAIA;;AACA,MAAMI,YAAY,GAAG;AACpBX,EAAAA,IAAI,EAAE;AAAEY,IAAAA,SAAS,EAAEP;AAAb,GADc;AAEpBJ,EAAAA,SAAS,EAAE;AAAEY,IAAAA,QAAQ,EAAEH;AAAZ;AAFS,CAArB;AAIAI,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACV,SAAb,CAAuBY,QAAnC;AACA,MAAMG,UAAU,GAAG,CAAC5B,KAAD,CAAnB;AACA,MAAM6B,KAAK,GAAGhC,WAAW,CACxBY,OADwB,EAExBc,YAFwB,EAGxBtB,mBAAmB,CAACF,eAAe,CAAC,GAAG6B,UAAJ,CAAhB,CAHK,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n\tproductListReducer,\r\n\tproductDetailsReducer,\r\n} from \"./actions/productReducers\";\r\nimport { cartReducers } from \"./actions/cartReducers\";\r\nimport {\r\n\tuserLoginReducer,\r\n\tuserDetailsReducer,\r\n\tuserRegisterReducer,\r\n\tuserUpdateProfileReducer,\r\n} from \"./actions/userReducers\";\r\nconst reducer = combineReducers({\r\n\tproductList: productListReducer,\r\n\tproductDetails: productDetailsReducer,\r\n\tcart: cartReducers,\r\n\tuserLogin: userLoginReducer,\r\n\tuserDetails: userDetailsReducer,\r\n\tuserRegister: userRegisterReducer,\r\n\tuserUpdateProfile: userUpdateProfileReducer,\r\n});\r\n\r\n//storing backend products/:id property in cartItems state\r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n\t? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\r\n\t: [];\r\n\r\n// if we have a userInfo in storage, then convert to an object for us to use\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n\t? JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\t: null;\r\n\r\n//Putting the cartItems in a global state\r\nconst initialState = {\r\n\tcart: { cartItems: cartItemsFromStorage },\r\n\tuserLogin: { userInfo: userInfoFromStorage },\r\n};\r\nconsole.log(initialState.userLogin.userInfo);\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}