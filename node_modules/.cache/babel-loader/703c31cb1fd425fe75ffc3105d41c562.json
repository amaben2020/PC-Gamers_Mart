{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Proshop Ecommerce\\\\frontend\\\\frontend\\\\src\\\\components\\\\screen\\\\UserEditScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ErrorMessage from \"./../../messages/ErrorMessage\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport Loading from \"./../../messages/Loading\";\nimport FormContainer from \"./FormContainer/FormContainer.js\";\nimport { updateUser } from \"./../../actions/userActions\";\nimport { getUserDetails } from \"./../../actions/userActions\";\nimport { Row } from \"react-bootstrap\";\nimport { USER_UPDATE_RESET } from \"../../constants/userConstants.js\"; // getUserDetails:  createdAt,email,isAdmin: false,name: \"Jane Doe\",updatedAt,_id excluding token cos we used .select('-password) in the backend\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = ({\n  location,\n  history,\n  match\n}) => {\n  _s();\n\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch(); //getting the user id so it mimicks postman i.e PUT http://localhost:9000/api/users/6060767188f29d2030440c22\n\n  const userId = match.params.id; //Redirect moves you to the homepage '/' when you successfully login\n\n  const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\n  console.log(redirect);\n  console.log(location);\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  console.log(user);\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateUser({\n      _id: userId,\n      name,\n      email,\n      isAdmin\n    }));\n  }; //This useEffecr simply makes the data available for the user's information that would be updated\n\n\n  useEffect(() => {\n    // if the update is successful, update the user details and redirect to userlist\n    if (successUpdate) {\n      history.push(\"/admin/userlist\");\n    } else {\n      //if there isnt a username in the name field or the userid in the database doesnt match with the one we selected.... kinda impossible but just making sure all is well, the display the userDetails from backend for that user\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n        setIsAdmin(user.isAdmin);\n      }\n    }\n  }, [user, dispatch, userId, successUpdate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: [\" \", \"Go Back\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 6\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 6\n      }, this) : error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        variant: \"danger\",\n        children: [\" \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isadmin\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              className: \"mr-3\",\n              children: \"Is Admin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              checked: isAdmin,\n              onChange: e => setIsAdmin(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"SIGN UP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"5xZl2K/vVF3cnaa6GriFBqYsyHw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/components/screen/UserEditScreen.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","ErrorMessage","Link","Form","Button","Loading","FormContainer","updateUser","getUserDetails","Row","USER_UPDATE_RESET","UserEditScreen","location","history","match","isAdmin","setIsAdmin","email","setEmail","name","setName","message","setMessage","dispatch","userId","params","id","redirect","search","split","console","log","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","submitHandler","e","preventDefault","_id","push","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ErrorMessage from \"./../../messages/ErrorMessage\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Loading from \"./../../messages/Loading\";\r\nimport FormContainer from \"./FormContainer/FormContainer.js\";\r\nimport { updateUser } from \"./../../actions/userActions\";\r\nimport { getUserDetails } from \"./../../actions/userActions\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { USER_UPDATE_RESET } from \"../../constants/userConstants.js\";\r\n// getUserDetails:  createdAt,email,isAdmin: false,name: \"Jane Doe\",updatedAt,_id excluding token cos we used .select('-password) in the backend\r\n\r\nconst UserEditScreen = ({ location, history, match }) => {\r\n\tconst [isAdmin, setIsAdmin] = useState(false);\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [message, setMessage] = useState(null);\r\n\tconst dispatch = useDispatch();\r\n\r\n\t//getting the user id so it mimicks postman i.e PUT http://localhost:9000/api/users/6060767188f29d2030440c22\r\n\tconst userId = match.params.id;\r\n\r\n\t//Redirect moves you to the homepage '/' when you successfully login\r\n\tconst redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\tconsole.log(redirect);\r\n\tconsole.log(location);\r\n\r\n\tconst userDetails = useSelector((state) => state.userDetails);\r\n\tconst { loading, error, user } = userDetails;\r\n\tconsole.log(user);\r\n\r\n\tconst userUpdate = useSelector((state) => state.userUpdate);\r\n\tconst {\r\n\t\tloading: loadingUpdate,\r\n\t\terror: errorUpdate,\r\n\t\tsuccess: successUpdate,\r\n\t} = userUpdate;\r\n\r\n\tconst submitHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tdispatch(\r\n\t\t\tupdateUser({\r\n\t\t\t\t_id: userId,\r\n\t\t\t\tname,\r\n\t\t\t\temail,\r\n\t\t\t\tisAdmin,\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\t//This useEffecr simply makes the data available for the user's information that would be updated\r\n\tuseEffect(() => {\r\n\t\t// if the update is successful, update the user details and redirect to userlist\r\n\t\tif (successUpdate) {\r\n\t\t\thistory.push(\"/admin/userlist\");\r\n\t\t} else {\r\n\t\t\t//if there isnt a username in the name field or the userid in the database doesnt match with the one we selected.... kinda impossible but just making sure all is well, the display the userDetails from backend for that user\r\n\t\t\tif (!user.name || user._id !== userId) {\r\n\t\t\t\tdispatch(getUserDetails(userId));\r\n\t\t\t} else {\r\n\t\t\t\tsetName(user.name);\r\n\t\t\t\tsetEmail(user.email);\r\n\t\t\t\tsetIsAdmin(user.isAdmin);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [user, dispatch, userId, successUpdate]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Link to=\"/admin/userlist\" className=\"btn btn-light my-3\">\r\n\t\t\t\t{\" \"}\r\n\t\t\t\tGo Back\r\n\t\t\t</Link>\r\n\t\t\t<FormContainer>\r\n\t\t\t\t<h1> Edit User</h1>\r\n\t\t\t\t{loadingUpdate && <Loading />}\r\n\t\t\t\t{errorUpdate && (\r\n\t\t\t\t\t<ErrorMessage variant=\"danger\">{errorUpdate}</ErrorMessage>\r\n\t\t\t\t)}\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<Loading />\r\n\t\t\t\t) : error ? (\r\n\t\t\t\t\t<ErrorMessage variant=\"danger\"> {error}</ErrorMessage>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Form onSubmit={submitHandler}>\r\n\t\t\t\t\t\t<Form.Group controlId=\"name\">\r\n\t\t\t\t\t\t\t<Form.Label>Name</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"name\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Name\"\r\n\t\t\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Form.Group controlId=\"email\">\r\n\t\t\t\t\t\t\t<Form.Label>Email Address</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Email\"\r\n\t\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\r\n\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t<Form.Group controlId=\"isadmin\">\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"mr-3\">Is Admin</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\tchecked={isAdmin}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setIsAdmin(e.target.checked)}\r\n\t\t\t\t\t\t\t\t></Form.Check>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Button type=\"submit\" variant=\"primary\">\r\n\t\t\t\t\t\t\tSIGN UP\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</FormContainer>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default UserEditScreen;\r\n"]},"metadata":{},"sourceType":"module"}