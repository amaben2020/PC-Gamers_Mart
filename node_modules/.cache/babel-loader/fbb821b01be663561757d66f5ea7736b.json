{"ast":null,"code":"import { PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_CREATE_FAIL, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_REVIEW_SUCCESS, PRODUCT_REVIEW_FAIL, PRODUCT_REVIEW_REQUEST } from \"./../constants/constants\";\nimport axios from \"axios\";\nexport const productListAction = (keyword = \"\") => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    //filter the products by inputted words\n    const {\n      data\n    } = await axios.get(`/api/products?keyword=${keyword}`);\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    //Dispatching error, if there is a custom error, fire that one, else use generic error\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.data.message : error.message\n    });\n  }\n};\nexport const productDetailsAction = id => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get(`/api/products/${id}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    //Dispatching error, if there is a custom error, fire that one, else use generic error\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.data.message : error.message\n    });\n  }\n};\nexport const productDeleteAction = productId => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_DELETE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; // user._id is from the database, user is the object we wanna send to database for updating\n\n    await axios.delete(`/api/products/${productId}`, config);\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS\n    }); //dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const productCreateAction = () => async (dispatch, getState) => {\n  //no need for any parameters\n  dispatch({\n    type: PRODUCT_CREATE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; // we just pass a large empty object to create products\n\n    const {\n      data\n    } = await axios.post(`/api/products`, {}, config);\n    console.log(\"created : \", data);\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const productUpdateAction = product => async (dispatch, getState) => {\n  //product is what you wanna update\n  dispatch({\n    type: PRODUCT_UPDATE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; // we just pass a large empty object to UPDATE products\n\n    const {\n      data\n    } = await axios.put(`/api/products/${product._id}`, product, config);\n    dispatch({\n      type: PRODUCT_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_UPDATE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\n  //product is what you wanna update\n  dispatch({\n    type: PRODUCT_REVIEW_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; // we just pass a review object to create review, this serves as body\n\n    await axios.put(`/api/products/${productId}/reviews`, review, config); //you dont need a payload, just success if true\n\n    dispatch({\n      type: PRODUCT_REVIEW_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_REVIEW_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/actions/productListActions.js"],"names":["PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAIL","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_REVIEW_SUCCESS","PRODUCT_REVIEW_FAIL","PRODUCT_REVIEW_REQUEST","axios","productListAction","keyword","dispatch","type","data","get","payload","error","response","message","productDetailsAction","id","productDeleteAction","productId","getState","userLogin","userInfo","config","headers","Authorization","token","delete","productCreateAction","post","console","log","productUpdateAction","product","put","_id","createProductReview","review"],"mappings":"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","sourcesContent":["import {\r\n\tPRODUCT_LIST_FAIL,\r\n\tPRODUCT_LIST_REQUEST,\r\n\tPRODUCT_LIST_SUCCESS,\r\n\tPRODUCT_DETAILS_SUCCESS,\r\n\tPRODUCT_DETAILS_FAIL,\r\n\tPRODUCT_DETAILS_REQUEST,\r\n\tPRODUCT_DELETE_REQUEST,\r\n\tPRODUCT_DELETE_SUCCESS,\r\n\tPRODUCT_DELETE_FAIL,\r\n\tPRODUCT_CREATE_REQUEST,\r\n\tPRODUCT_CREATE_SUCCESS,\r\n\tPRODUCT_CREATE_FAIL,\r\n\tPRODUCT_UPDATE_REQUEST,\r\n\tPRODUCT_UPDATE_SUCCESS,\r\n\tPRODUCT_UPDATE_FAIL,\r\n\tPRODUCT_REVIEW_SUCCESS,\r\n\tPRODUCT_REVIEW_FAIL,\r\n\tPRODUCT_REVIEW_REQUEST,\r\n} from \"./../constants/constants\";\r\nimport axios from \"axios\";\r\n\r\nexport const productListAction = (keyword = \"\") => async (dispatch) => {\r\n\tdispatch({ type: PRODUCT_LIST_REQUEST });\r\n\r\n\ttry {\r\n\t\t//filter the products by inputted words\r\n\t\tconst { data } = await axios.get(`/api/products?keyword=${keyword}`);\r\n\r\n\t\tdispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\t//Dispatching error, if there is a custom error, fire that one, else use generic error\r\n\t\tdispatch({\r\n\t\t\ttype: PRODUCT_LIST_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const productDetailsAction = (id) => async (dispatch) => {\r\n\tdispatch({ type: PRODUCT_DETAILS_REQUEST });\r\n\r\n\ttry {\r\n\t\tconst { data } = await axios.get(`/api/products/${id}`);\r\n\r\n\t\tdispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\t//Dispatching error, if there is a custom error, fire that one, else use generic error\r\n\t\tdispatch({\r\n\t\t\ttype: PRODUCT_DETAILS_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const productDeleteAction = (productId) => async (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tdispatch({ type: PRODUCT_DELETE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t// user._id is from the database, user is the object we wanna send to database for updating\r\n\t\tawait axios.delete(`/api/products/${productId}`, config);\r\n\t\tdispatch({ type: PRODUCT_DELETE_SUCCESS });\r\n\t\t//dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: PRODUCT_DELETE_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const productCreateAction = () => async (dispatch, getState) => {\r\n\t//no need for any parameters\r\n\tdispatch({ type: PRODUCT_CREATE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t// we just pass a large empty object to create products\r\n\t\tconst { data } = await axios.post(`/api/products`, {}, config);\r\n\t\tconsole.log(\"created : \", data);\r\n\t\tdispatch({ type: PRODUCT_CREATE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: PRODUCT_CREATE_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const productUpdateAction = (product) => async (dispatch, getState) => {\r\n\t//product is what you wanna update\r\n\tdispatch({ type: PRODUCT_UPDATE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t// we just pass a large empty object to UPDATE products\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`/api/products/${product._id}`,\r\n\t\t\tproduct,\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({ type: PRODUCT_UPDATE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: PRODUCT_UPDATE_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const createProductReview = (productId, review) => async (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\t//product is what you wanna update\r\n\tdispatch({ type: PRODUCT_REVIEW_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t// we just pass a review object to create review, this serves as body\r\n\t\tawait axios.put(`/api/products/${productId}/reviews`, review, config);\r\n\t\t//you dont need a payload, just success if true\r\n\t\tdispatch({ type: PRODUCT_REVIEW_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: PRODUCT_REVIEW_FAIL, payload: error });\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}