{"ast":null,"code":"import _slicedToArray from\"C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import ErrorMessage from\"./../../messages/ErrorMessage\";import{Link}from\"react-router-dom\";import{Form,Button}from\"react-bootstrap\";import Loading from\"./../../messages/Loading\";import FormContainer from\"./FormContainer/FormContainer.js\";import{updateUser}from\"./../../actions/userActions\";import{getUserDetails,getUserForAdmin}from\"./../../actions/userActions\";import{Row}from\"react-bootstrap\";import{USER_UPDATE_RESET}from\"../../constants/userConstants.js\";// getUserDetails:  createdAt,email,isAdmin: false,name: \"Jane Doe\",updatedAt,_id excluding token cos we used .select('-password) in the backend\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var UserEditScreen=function UserEditScreen(_ref){var location=_ref.location,history=_ref.history,match=_ref.match;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isAdmin=_useState2[0],setIsAdmin=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),name=_useState6[0],setName=_useState6[1];var dispatch=useDispatch();//getting the user id so it mimicks postman i.e PUT http://localhost:9000/api/users/6060767188f29d2030440c22\nvar userId=match.params.id;// const userDetails = useSelector((state) => state.userDetails);\n// const { loading, error, user } = userDetails;\n// console.log(userDetails);\nvar adminProfileList=useSelector(function(state){return state.adminProfileList;});var loadingAdminProfileEdit=adminProfileList.loading,errorAdminProfileEdit=adminProfileList.error,userAdminProfileEdit=adminProfileList.user;//console.log(userDetails);\n//console.log(userAdminProfileEdit.name);\nvar userUpdate=useSelector(function(state){return state.userUpdate;});var loadingUpdate=userUpdate.loading,errorUpdate=userUpdate.error,successUpdate=userUpdate.success;var submitHandler=function submitHandler(e){e.preventDefault();dispatch(updateUser({_id:userId,name:name,email:email,isAdmin:isAdmin}));};//This useEffect simply makes the data available for the user's information that would be updated\nuseEffect(function(){// if the update is successful, update the user details and redirect to userlist\nif(successUpdate){//reset the state after update is successful and move admin to /userlist\ndispatch({type:USER_UPDATE_RESET});history.push(\"/admin/userlist\");}else{//if there isnt a username in the name field or the userid in the database doesnt match with the one we selected.... kinda impossible but just making sure all is well, the display the userDetails from backend for that user\nif(!userAdminProfileEdit.name||userAdminProfileEdit._id!==userId){dispatch(getUserForAdmin(userId));//dispatch(getUserDetails(user._id));\n}else{setName(userAdminProfileEdit.name);setEmail(userAdminProfileEdit.email);setIsAdmin(userAdminProfileEdit.isAdmin);}}},[dispatch,userId,successUpdate,history,userAdminProfileEdit]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Link,{to:\"/admin/userlist\",className:\"btn btn-light my-3\",children:[\" \",\"Go Back\"]}),/*#__PURE__*/_jsxs(FormContainer,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Edit User\"}),loadingUpdate&&/*#__PURE__*/_jsx(Loading,{}),errorUpdate&&/*#__PURE__*/_jsx(ErrorMessage,{variant:\"danger\",children:errorUpdate}),loadingAdminProfileEdit?/*#__PURE__*/_jsx(Loading,{}):errorAdminProfileEdit?/*#__PURE__*/_jsxs(ErrorMessage,{variant:\"danger\",children:[\" \",errorAdminProfileEdit]}):/*#__PURE__*/_jsxs(Form,{onSubmit:submitHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"name\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"name\",placeholder:\"Enter Name\",value:name,onChange:function onChange(e){return setName(e.target.value);}})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"email\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Email Address\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"email\",placeholder:\"Enter Email\",value:email,onChange:function onChange(e){return setEmail(e.target.value);}})]}),/*#__PURE__*/_jsx(Form.Group,{controlId:\"isadmin\",children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Form.Label,{className:\"mr-3\",children:\"Is Admin\"}),/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",checked:isAdmin,onChange:function onChange(e){return setIsAdmin(e.target.checked);}})]})}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"primary\",children:\"UPDATE\"})]})]})]});};export default UserEditScreen;","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/components/screen/UserEditScreen.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","ErrorMessage","Link","Form","Button","Loading","FormContainer","updateUser","getUserDetails","getUserForAdmin","Row","USER_UPDATE_RESET","UserEditScreen","location","history","match","isAdmin","setIsAdmin","email","setEmail","name","setName","dispatch","userId","params","id","adminProfileList","state","loadingAdminProfileEdit","loading","errorAdminProfileEdit","error","userAdminProfileEdit","user","userUpdate","loadingUpdate","errorUpdate","successUpdate","success","submitHandler","e","preventDefault","_id","type","push","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ErrorMessage from \"./../../messages/ErrorMessage\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Loading from \"./../../messages/Loading\";\r\nimport FormContainer from \"./FormContainer/FormContainer.js\";\r\nimport { updateUser } from \"./../../actions/userActions\";\r\nimport { getUserDetails, getUserForAdmin } from \"./../../actions/userActions\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { USER_UPDATE_RESET } from \"../../constants/userConstants.js\";\r\n// getUserDetails:  createdAt,email,isAdmin: false,name: \"Jane Doe\",updatedAt,_id excluding token cos we used .select('-password) in the backend\r\n\r\nconst UserEditScreen = ({ location, history, match }) => {\r\n\tconst [isAdmin, setIsAdmin] = useState(false);\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [name, setName] = useState(\"\");\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\t//getting the user id so it mimicks postman i.e PUT http://localhost:9000/api/users/6060767188f29d2030440c22\r\n\tconst userId = match.params.id;\r\n\r\n\t// const userDetails = useSelector((state) => state.userDetails);\r\n\t// const { loading, error, user } = userDetails;\r\n\t// console.log(userDetails);\r\n\r\n\tconst adminProfileList = useSelector((state) => state.adminProfileList);\r\n\tconst {\r\n\t\tloading: loadingAdminProfileEdit,\r\n\t\terror: errorAdminProfileEdit,\r\n\t\tuser: userAdminProfileEdit,\r\n\t} = adminProfileList;\r\n\t//console.log(userDetails);\r\n\t//console.log(userAdminProfileEdit.name);\r\n\r\n\tconst userUpdate = useSelector((state) => state.userUpdate);\r\n\tconst {\r\n\t\tloading: loadingUpdate,\r\n\t\terror: errorUpdate,\r\n\t\tsuccess: successUpdate,\r\n\t} = userUpdate;\r\n\r\n\tconst submitHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tdispatch(\r\n\t\t\tupdateUser({\r\n\t\t\t\t_id: userId,\r\n\t\t\t\tname,\r\n\t\t\t\temail,\r\n\t\t\t\tisAdmin,\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\t//This useEffect simply makes the data available for the user's information that would be updated\r\n\tuseEffect(() => {\r\n\t\t// if the update is successful, update the user details and redirect to userlist\r\n\t\tif (successUpdate) {\r\n\t\t\t//reset the state after update is successful and move admin to /userlist\r\n\t\t\tdispatch({ type: USER_UPDATE_RESET });\r\n\t\t\thistory.push(\"/admin/userlist\");\r\n\t\t} else {\r\n\t\t\t//if there isnt a username in the name field or the userid in the database doesnt match with the one we selected.... kinda impossible but just making sure all is well, the display the userDetails from backend for that user\r\n\t\t\tif (!userAdminProfileEdit.name || userAdminProfileEdit._id !== userId) {\r\n\t\t\t\tdispatch(getUserForAdmin(userId));\r\n\r\n\t\t\t\t//dispatch(getUserDetails(user._id));\r\n\t\t\t} else {\r\n\t\t\t\tsetName(userAdminProfileEdit.name);\r\n\t\t\t\tsetEmail(userAdminProfileEdit.email);\r\n\t\t\t\tsetIsAdmin(userAdminProfileEdit.isAdmin);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [dispatch, userId, successUpdate, history, userAdminProfileEdit]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Link to=\"/admin/userlist\" className=\"btn btn-light my-3\">\r\n\t\t\t\t{\" \"}\r\n\t\t\t\tGo Back\r\n\t\t\t</Link>\r\n\t\t\t<FormContainer>\r\n\t\t\t\t<h1> Edit User</h1>\r\n\t\t\t\t{loadingUpdate && <Loading />}\r\n\t\t\t\t{errorUpdate && (\r\n\t\t\t\t\t<ErrorMessage variant=\"danger\">{errorUpdate}</ErrorMessage>\r\n\t\t\t\t)}\r\n\t\t\t\t{loadingAdminProfileEdit ? (\r\n\t\t\t\t\t<Loading />\r\n\t\t\t\t) : errorAdminProfileEdit ? (\r\n\t\t\t\t\t<ErrorMessage variant=\"danger\"> {errorAdminProfileEdit}</ErrorMessage>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Form onSubmit={submitHandler}>\r\n\t\t\t\t\t\t<Form.Group controlId=\"name\">\r\n\t\t\t\t\t\t\t<Form.Label>Name</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"name\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Name\"\r\n\t\t\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Form.Group controlId=\"email\">\r\n\t\t\t\t\t\t\t<Form.Label>Email Address</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Email\"\r\n\t\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\r\n\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t<Form.Group controlId=\"isadmin\">\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"mr-3\">Is Admin</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\tchecked={isAdmin}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setIsAdmin(e.target.checked)}\r\n\t\t\t\t\t\t\t\t></Form.Check>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Button type=\"submit\" variant=\"primary\">\r\n\t\t\t\t\t\t\tUPDATE\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</FormContainer>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default UserEditScreen;\r\n"]},"metadata":{},"sourceType":"module"}