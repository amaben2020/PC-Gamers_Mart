{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ORDER_CREATE_FAIL,ORDER_CREATE_REQUEST,ORDER_CREATE_SUCCESS,ORDER_DELIVER_FAIL,ORDER_DELIVER_REQUEST,ORDER_DELIVER_SUCCESS,ORDER_DETAILS_FAIL,ORDER_DETAILS_REQUEST,ORDER_DETAILS_SUCCESS,ORDER_LIST_FAIL,ORDER_LIST_MY_FAIL,ORDER_LIST_MY_REQUEST,ORDER_LIST_MY_SUCCESS,ORDER_LIST_REQUEST,ORDER_LIST_SUCCESS,ORDER_PAY_FAIL,ORDER_PAY_REQUEST,ORDER_PAY_SUCCESS}from\"./../constants/orderConstants\";import axios from\"axios\";//action to be dispatched when an order is created\nexport var createOrder=function createOrder(order){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var _getState,userInfo,config,_yield$axios$post,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ORDER_CREATE_REQUEST});_context.prev=1;//getting the userInfo i.e Token from state so you could access the user's profile\n_getState=getState(),userInfo=_getState.userLogin.userInfo;config={headers:{Authorization:\"Bearer \".concat(userInfo.token,\" \")}};//the order {} object field must have same info with backend\n_context.next=6;return axios.post(\"/api/orders\",order,config);case 6:_yield$axios$post=_context.sent;data=_yield$axios$post.data;console.log(\"ORDER:\",data);dispatch({type:ORDER_CREATE_SUCCESS,payload:data});_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](1);dispatch({type:ORDER_CREATE_FAIL,payload:_context.t0});case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,12]]);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var getOrderDetails=function getOrderDetails(id){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var _getState2,userInfo,config,_yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0://id is the user that placed the order\ndispatch({type:ORDER_DETAILS_REQUEST});_context2.prev=1;//getting the userInfo i.e Token from state so you could access the user's profile\n_getState2=getState(),userInfo=_getState2.userLogin.userInfo;config={headers:{Authorization:\"Bearer \".concat(userInfo.token,\" \")}};//the order {} object field must have same info with backend\n_context2.next=6;return axios.get(\"/api/orders/\".concat(id),config);case 6:_yield$axios$get=_context2.sent;data=_yield$axios$get.data;console.log(\"ORDER DETAILS:\",data);dispatch({type:ORDER_DETAILS_SUCCESS,payload:data});_context2.next=15;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](1);dispatch({type:ORDER_DETAILS_FAIL,payload:_context2.t0});case 15:case\"end\":return _context2.stop();}}},_callee2,null,[[1,12]]);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}();};//Setting up the payOrder action\n//The orderId is the id from the order while the paymentResult is what we send to the PayPal API\nexport var payOrder=function payOrder(orderId,paymentResult){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){var _getState3,userInfo,config,_yield$axios$put,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0://id is the user that placed the order that would be sent from f.end to b.end\ndispatch({type:ORDER_PAY_REQUEST});_context3.prev=1;//getting the userInfo i.e Token from state so you could access the user's profile\n_getState3=getState(),userInfo=_getState3.userLogin.userInfo;//you need Content-Type cos you're sending something fro b.end\nconfig={headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token,\" \")}};//the order {} object field must have same info with backend\n_context3.next=6;return axios.put(\"/api/orders/\".concat(orderId,\"/pay\"),paymentResult,config);case 6:_yield$axios$put=_context3.sent;data=_yield$axios$put.data;dispatch({type:ORDER_PAY_SUCCESS,payload:data});_context3.next=14;break;case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](1);dispatch({type:ORDER_PAY_FAIL,payload:_context3.t0});case 14:case\"end\":return _context3.stop();}}},_callee3,null,[[1,11]]);}));return function(_x5,_x6){return _ref3.apply(this,arguments);};}();};export var deliverOrder=function deliverOrder(order){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch,getState){var _getState4,userInfo,config;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0://id is the user that placed the order that would be sent from f.end to b.end\ndispatch({type:ORDER_DELIVER_REQUEST});_context4.prev=1;//getting the userInfo i.e Token from state so you could access the user's profile\n_getState4=getState(),userInfo=_getState4.userLogin.userInfo;//you need Content-Type cos you're sending something fro b.end\nconfig={headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(userInfo.token,\" \")}};//the order {} object field must have same info with backend\n_context4.next=6;return axios.put(\"/api/orders/\".concat(order,\"/deliver\"),{},config);case 6:dispatch({type:ORDER_DELIVER_SUCCESS});_context4.next=12;break;case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](1);dispatch({type:ORDER_DELIVER_FAIL,payload:_context4.t0});case 12:case\"end\":return _context4.stop();}}},_callee4,null,[[1,9]]);}));return function(_x7,_x8){return _ref4.apply(this,arguments);};}();};export var listMyOrders=function listMyOrders(){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch,getState){var _getState5,userInfo,config,_yield$axios$get2,data;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0://id is the user that placed the order that would be sent from f.end to b.end\ndispatch({type:ORDER_LIST_MY_REQUEST});_context5.prev=1;//getting the userInfo i.e Token from state so you could access the user's profile\n_getState5=getState(),userInfo=_getState5.userLogin.userInfo;//you dont need Content-Type cos you're just receiving something fro b.end\nconfig={headers:{Authorization:\"Bearer \".concat(userInfo.token,\" \")}};//the order {} object field must have same info with backend\n_context5.next=6;return axios.get(\"/api/orders/myorders\",config);case 6:_yield$axios$get2=_context5.sent;data=_yield$axios$get2.data;dispatch({type:ORDER_LIST_MY_SUCCESS,payload:data});_context5.next=14;break;case 11:_context5.prev=11;_context5.t0=_context5[\"catch\"](1);dispatch({type:ORDER_LIST_MY_FAIL,payload:_context5.t0});case 14:case\"end\":return _context5.stop();}}},_callee5,null,[[1,11]]);}));return function(_x9,_x10){return _ref5.apply(this,arguments);};}();};export var listOrders=function listOrders(){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch,getState){var _getState6,userInfo,config,_yield$axios$get3,data;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0://id is the user that placed the order that would be sent from f.end to b.end\ndispatch({type:ORDER_LIST_REQUEST});_context6.prev=1;//getting the userInfo i.e Token from state so you could access the user's profile\n_getState6=getState(),userInfo=_getState6.userLogin.userInfo;//you dont need Content-Type cos you're just receiving something fro b.end\nconfig={headers:{Authorization:\"Bearer \".concat(userInfo.token,\" \")}};//the order {} object field must have same info with backend\n_context6.next=6;return axios.get(\"/api/orders\",config);case 6:_yield$axios$get3=_context6.sent;data=_yield$axios$get3.data;dispatch({type:ORDER_LIST_SUCCESS,payload:data});_context6.next=14;break;case 11:_context6.prev=11;_context6.t0=_context6[\"catch\"](1);dispatch({type:ORDER_LIST_FAIL,payload:_context6.t0});case 14:case\"end\":return _context6.stop();}}},_callee6,null,[[1,11]]);}));return function(_x11,_x12){return _ref6.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/actions/orderActions.js"],"names":["ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DELIVER_FAIL","ORDER_DELIVER_REQUEST","ORDER_DELIVER_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_LIST_FAIL","ORDER_LIST_MY_FAIL","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_PAY_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","axios","createOrder","order","dispatch","getState","type","userInfo","userLogin","config","headers","Authorization","token","post","data","console","log","payload","getOrderDetails","id","get","payOrder","orderId","paymentResult","put","deliverOrder","listMyOrders","listOrders"],"mappings":"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","sourcesContent":["import {\r\n\tORDER_CREATE_FAIL,\r\n\tORDER_CREATE_REQUEST,\r\n\tORDER_CREATE_SUCCESS,\r\n\tORDER_DELIVER_FAIL,\r\n\tORDER_DELIVER_REQUEST,\r\n\tORDER_DELIVER_SUCCESS,\r\n\tORDER_DETAILS_FAIL,\r\n\tORDER_DETAILS_REQUEST,\r\n\tORDER_DETAILS_SUCCESS,\r\n\tORDER_LIST_FAIL,\r\n\tORDER_LIST_MY_FAIL,\r\n\tORDER_LIST_MY_REQUEST,\r\n\tORDER_LIST_MY_SUCCESS,\r\n\tORDER_LIST_REQUEST,\r\n\tORDER_LIST_SUCCESS,\r\n\tORDER_PAY_FAIL,\r\n\tORDER_PAY_REQUEST,\r\n\tORDER_PAY_SUCCESS,\r\n} from \"./../constants/orderConstants\";\r\nimport axios from \"axios\";\r\n\r\n//action to be dispatched when an order is created\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n\tdispatch({ type: ORDER_CREATE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.post(`/api/orders`, order, config);\r\n\t\tconsole.log(\"ORDER:\", data);\r\n\t\tdispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_CREATE_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n\t//id is the user that placed the order\r\n\tdispatch({ type: ORDER_DETAILS_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.get(`/api/orders/${id}`, config);\r\n\t\tconsole.log(\"ORDER DETAILS:\", data);\r\n\t\tdispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_DETAILS_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\n//Setting up the payOrder action\r\n//The orderId is the id from the order while the paymentResult is what we send to the PayPal API\r\nexport const payOrder = (orderId, paymentResult) => async (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\t//id is the user that placed the order that would be sent from f.end to b.end\r\n\tdispatch({ type: ORDER_PAY_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t//you need Content-Type cos you're sending something fro b.end\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`/api/orders/${orderId}/pay`,\r\n\t\t\tpaymentResult,\r\n\t\t\tconfig\r\n\t\t);\r\n\t\tdispatch({ type: ORDER_PAY_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_PAY_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n\t//id is the user that placed the order that would be sent from f.end to b.end\r\n\tdispatch({ type: ORDER_DELIVER_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t//you need Content-Type cos you're sending something fro b.end\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tawait axios.put(`/api/orders/${order}/deliver`, {}, config);\r\n\t\tdispatch({ type: ORDER_DELIVER_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_DELIVER_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n\t//id is the user that placed the order that would be sent from f.end to b.end\r\n\tdispatch({ type: ORDER_LIST_MY_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t//you dont need Content-Type cos you're just receiving something fro b.end\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.get(\r\n\t\t\t`/api/orders/myorders`,\r\n\r\n\t\t\tconfig\r\n\t\t);\r\n\t\tdispatch({ type: ORDER_LIST_MY_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_LIST_MY_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n\t//id is the user that placed the order that would be sent from f.end to b.end\r\n\tdispatch({ type: ORDER_LIST_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t//you dont need Content-Type cos you're just receiving something fro b.end\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.get(\r\n\t\t\t`/api/orders`,\r\n\r\n\t\t\tconfig\r\n\t\t);\r\n\t\tdispatch({ type: ORDER_LIST_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_LIST_FAIL, payload: error });\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}