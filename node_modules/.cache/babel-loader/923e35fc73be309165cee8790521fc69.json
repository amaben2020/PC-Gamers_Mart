{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer } from \"./actions/productReducers\";\nimport { cartReducers } from \"./actions/cartReducers\";\nimport { userLoginReducer, userDetailsReducer, userRegisterReducer, userUpdateProfileReducer } from \"./actions/userReducers\";\nimport { orderReducers, orderDetailsReducers, orderPayReducer } from \"./actions/orderReducers\";\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducers,\n  userLogin: userLoginReducer,\n  userDetails: userDetailsReducer,\n  userRegister: userRegisterReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreator: orderReducers,\n  orderDetails: orderDetailsReducers,\n  orderPay: orderPayReducer\n}); //storing backend products/:id property in cartItems state\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\n: []; // if we have a userInfo in storage, then convert to an object for us to use\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null;\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {};\nconst paymentMethodFromStorage = localStorage.getItem(\"paymentMethod\") ? JSON.parse(localStorage.getItem(\"paymentMethod\")) : \"\"; //Putting the cartItems in a global state\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAdd: shippingAddressFromStorage,\n    paymentMethod: paymentMethodFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconsole.log(initialState.cart.paymentMethod);\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducers","userLoginReducer","userDetailsReducer","userRegisterReducer","userUpdateProfileReducer","orderReducers","orderDetailsReducers","orderPayReducer","reducer","productList","productDetails","cart","userLogin","userDetails","userRegister","userUpdateProfile","orderCreator","orderDetails","orderPay","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","paymentMethodFromStorage","initialState","cartItems","shippingAdd","paymentMethod","userInfo","console","log","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,kBADD,EAECC,qBAFD,QAGO,2BAHP;AAIA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SACCC,gBADD,EAECC,kBAFD,EAGCC,mBAHD,EAICC,wBAJD,QAKO,wBALP;AAMA,SACCC,aADD,EAECC,oBAFD,EAGCC,eAHD,QAIO,yBAJP;AAKA,MAAMC,OAAO,GAAGd,eAAe,CAAC;AAC/Be,EAAAA,WAAW,EAAEX,kBADkB;AAE/BY,EAAAA,cAAc,EAAEX,qBAFe;AAG/BY,EAAAA,IAAI,EAAEX,YAHyB;AAI/BY,EAAAA,SAAS,EAAEX,gBAJoB;AAK/BY,EAAAA,WAAW,EAAEX,kBALkB;AAM/BY,EAAAA,YAAY,EAAEX,mBANiB;AAO/BY,EAAAA,iBAAiB,EAAEX,wBAPY;AAQ/BY,EAAAA,YAAY,EAAEX,aARiB;AAS/BY,EAAAA,YAAY,EAAEX,oBATiB;AAU/BY,EAAAA,QAAQ,EAAEX;AAVqB,CAAD,CAA/B,C,CAaA;;AACA,MAAMY,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAD0B,CACoB;AADpB,EAE1B,EAFH,C,CAIA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADyB,GAEzB,IAFH;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAChCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADgC,GAEhC,EAFH;AAIA,MAAMK,wBAAwB,GAAGN,YAAY,CAACC,OAAb,CAAqB,eAArB,IAC9BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,CAD8B,GAE9B,EAFH,C,CAIA;;AACA,MAAMM,YAAY,GAAG;AACpBhB,EAAAA,IAAI,EAAE;AACLiB,IAAAA,SAAS,EAAET,oBADN;AAELU,IAAAA,WAAW,EAAEJ,0BAFR;AAGLK,IAAAA,aAAa,EAAEJ;AAHV,GADc;AAMpBd,EAAAA,SAAS,EAAE;AAAEmB,IAAAA,QAAQ,EAAEP;AAAZ;AANS,CAArB;AAQAQ,OAAO,CAACC,GAAR,CAAYN,YAAY,CAAChB,IAAb,CAAkBmB,aAA9B;AAEA,MAAMI,UAAU,GAAG,CAACtC,KAAD,CAAnB;AACA,MAAMuC,KAAK,GAAG1C,WAAW,CACxBe,OADwB,EAExBmB,YAFwB,EAGxB9B,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAJ,CAAhB,CAHK,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n\tproductListReducer,\r\n\tproductDetailsReducer,\r\n} from \"./actions/productReducers\";\r\nimport { cartReducers } from \"./actions/cartReducers\";\r\nimport {\r\n\tuserLoginReducer,\r\n\tuserDetailsReducer,\r\n\tuserRegisterReducer,\r\n\tuserUpdateProfileReducer,\r\n} from \"./actions/userReducers\";\r\nimport {\r\n\torderReducers,\r\n\torderDetailsReducers,\r\n\torderPayReducer,\r\n} from \"./actions/orderReducers\";\r\nconst reducer = combineReducers({\r\n\tproductList: productListReducer,\r\n\tproductDetails: productDetailsReducer,\r\n\tcart: cartReducers,\r\n\tuserLogin: userLoginReducer,\r\n\tuserDetails: userDetailsReducer,\r\n\tuserRegister: userRegisterReducer,\r\n\tuserUpdateProfile: userUpdateProfileReducer,\r\n\torderCreator: orderReducers,\r\n\torderDetails: orderDetailsReducers,\r\n\torderPay: orderPayReducer,\r\n});\r\n\r\n//storing backend products/:id property in cartItems state\r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n\t? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\r\n\t: [];\r\n\r\n// if we have a userInfo in storage, then convert to an object for us to use\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n\t? JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\t: null;\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")\r\n\t? JSON.parse(localStorage.getItem(\"shippingAddress\"))\r\n\t: {};\r\n\r\nconst paymentMethodFromStorage = localStorage.getItem(\"paymentMethod\")\r\n\t? JSON.parse(localStorage.getItem(\"paymentMethod\"))\r\n\t: \"\";\r\n\r\n//Putting the cartItems in a global state\r\nconst initialState = {\r\n\tcart: {\r\n\t\tcartItems: cartItemsFromStorage,\r\n\t\tshippingAdd: shippingAddressFromStorage,\r\n\t\tpaymentMethod: paymentMethodFromStorage,\r\n\t},\r\n\tuserLogin: { userInfo: userInfoFromStorage },\r\n};\r\nconsole.log(initialState.cart.paymentMethod);\r\n\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}