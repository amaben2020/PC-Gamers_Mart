{"ast":null,"code":"import { ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS } from \"./../constants/orderConstants\";\nimport axios from \"axios\"; //action to be dispatched when an order is created\n\nexport const createOrder = order => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_CREATE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; //the order {} object field must have same info with backend\n\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    console.log(\"ORDER:\", data);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  //id is the user that placed the order\n  dispatch({\n    type: ORDER_DETAILS_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; //the order {} object field must have same info with backend\n\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    console.log(\"ORDER DETAILS:\", data);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n}; //Setting up the payOrder action\n//The orderId is the id from the order while the paymentResult is what we send to the PayPal API\n\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n  //id is the user that placed the order that would be sent from f.end to b.end\n  dispatch({\n    type: ORDER_DETAILS_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //you need Content-Type cos you're sending something fro b.end\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    }; //the order {} object field must have same info with backend\n\n    const {\n      data\n    } = await axios.put(`/api/orders/${orderId}/pay`, paymentResult, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/actions/orderActions.js"],"names":["ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","axios","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","console","log","payload","error","getOrderDetails","id","get","payOrder","orderId","paymentResult","put"],"mappings":"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","sourcesContent":["import {\r\n\tORDER_CREATE_FAIL,\r\n\tORDER_CREATE_REQUEST,\r\n\tORDER_CREATE_SUCCESS,\r\n\tORDER_DETAILS_FAIL,\r\n\tORDER_DETAILS_REQUEST,\r\n\tORDER_DETAILS_SUCCESS,\r\n} from \"./../constants/orderConstants\";\r\nimport axios from \"axios\";\r\n\r\n//action to be dispatched when an order is created\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n\tdispatch({ type: ORDER_CREATE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.post(`/api/orders`, order, config);\r\n\t\tconsole.log(\"ORDER:\", data);\r\n\t\tdispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_CREATE_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n\t//id is the user that placed the order\r\n\tdispatch({ type: ORDER_DETAILS_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.get(`/api/orders/${id}`, config);\r\n\t\tconsole.log(\"ORDER DETAILS:\", data);\r\n\t\tdispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_DETAILS_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\n//Setting up the payOrder action\r\n//The orderId is the id from the order while the paymentResult is what we send to the PayPal API\r\nexport const payOrder = (orderId, paymentResult) => async (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\t//id is the user that placed the order that would be sent from f.end to b.end\r\n\tdispatch({ type: ORDER_DETAILS_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t//you need Content-Type cos you're sending something fro b.end\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\t//the order {} object field must have same info with backend\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`/api/orders/${orderId}/pay`,\r\n\t\t\tpaymentResult,\r\n\t\t\tconfig\r\n\t\t);\r\n\t\tdispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: ORDER_DETAILS_FAIL, payload: error });\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}