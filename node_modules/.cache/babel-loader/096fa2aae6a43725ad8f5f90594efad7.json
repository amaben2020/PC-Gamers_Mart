{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer } from \"./actions/productReducers\";\nimport { cartReducers } from \"./actions/cartReducers\";\nimport { userLoginReducer, userDetailsReducer, userRegisterReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer, adminProfileListReducer } from \"./actions/userReducers\";\nimport { orderReducers, orderDetailsReducers, orderPayReducer, orderListReducer, orderListMyReducer } from \"./actions/orderReducers\";\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  cart: cartReducers,\n  userLogin: userLoginReducer,\n  userDetails: userDetailsReducer,\n  userRegister: userRegisterReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userUpdate: userUpdateReducer,\n  orderCreator: orderReducers,\n  orderDetails: orderDetailsReducers,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer,\n  orderList: orderListReducer,\n  adminProfileList: adminProfileListReducer\n}); //storing backend products/:id property in cartItems state\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\n: []; // if we have a userInfo in storage, then convert to an object for us to use\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null;\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {};\nconst paymentMethodFromStorage = localStorage.getItem(\"paymentMethod\") ? JSON.parse(localStorage.getItem(\"paymentMethod\")) : \"\"; //Putting the cartItems in a global state\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAdd: shippingAddressFromStorage,\n    paymentMethod: paymentMethodFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n}; //console.log(initialState.cart.paymentMethod);\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","cartReducers","userLoginReducer","userDetailsReducer","userRegisterReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","adminProfileListReducer","orderReducers","orderDetailsReducers","orderPayReducer","orderListReducer","orderListMyReducer","reducer","productList","productDetails","productDelete","productCreate","productUpdate","cart","userLogin","userDetails","userRegister","userList","userDelete","userUpdateProfile","userUpdate","orderCreator","orderDetails","orderPay","orderListMy","orderList","adminProfileList","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","paymentMethodFromStorage","initialState","cartItems","shippingAdd","paymentMethod","userInfo","middleware","store"],"mappings":"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","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {\r\n\tproductListReducer,\r\n\tproductDetailsReducer,\r\n\tproductDeleteReducer,\r\n\tproductCreateReducer,\r\n\tproductUpdateReducer,\r\n} from \"./actions/productReducers\";\r\nimport { cartReducers } from \"./actions/cartReducers\";\r\nimport {\r\n\tuserLoginReducer,\r\n\tuserDetailsReducer,\r\n\tuserRegisterReducer,\r\n\tuserUpdateProfileReducer,\r\n\tuserListReducer,\r\n\tuserDeleteReducer,\r\n\tuserUpdateReducer,\r\n\tadminProfileListReducer,\r\n} from \"./actions/userReducers\";\r\nimport {\r\n\torderReducers,\r\n\torderDetailsReducers,\r\n\torderPayReducer,\r\n\torderListReducer,\r\n\torderListMyReducer,\r\n} from \"./actions/orderReducers\";\r\nconst reducer = combineReducers({\r\n\tproductList: productListReducer,\r\n\tproductDetails: productDetailsReducer,\r\n\tproductDelete: productDeleteReducer,\r\n\tproductCreate: productCreateReducer,\r\n\tproductUpdate: productUpdateReducer,\r\n\tcart: cartReducers,\r\n\tuserLogin: userLoginReducer,\r\n\tuserDetails: userDetailsReducer,\r\n\tuserRegister: userRegisterReducer,\r\n\tuserList: userListReducer,\r\n\tuserDelete: userDeleteReducer,\r\n\tuserUpdateProfile: userUpdateProfileReducer,\r\n\tuserUpdate: userUpdateReducer,\r\n\torderCreator: orderReducers,\r\n\torderDetails: orderDetailsReducers,\r\n\torderPay: orderPayReducer,\r\n\torderListMy: orderListMyReducer,\r\n\torderList: orderListReducer,\r\n\tadminProfileList: adminProfileListReducer,\r\n});\r\n\r\n//storing backend products/:id property in cartItems state\r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n\t? JSON.parse(localStorage.getItem(\"cartItems\")) //removed JSON.parse\r\n\t: [];\r\n\r\n// if we have a userInfo in storage, then convert to an object for us to use\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n\t? JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\t: null;\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")\r\n\t? JSON.parse(localStorage.getItem(\"shippingAddress\"))\r\n\t: {};\r\n\r\nconst paymentMethodFromStorage = localStorage.getItem(\"paymentMethod\")\r\n\t? JSON.parse(localStorage.getItem(\"paymentMethod\"))\r\n\t: \"\";\r\n\r\n//Putting the cartItems in a global state\r\nconst initialState = {\r\n\tcart: {\r\n\t\tcartItems: cartItemsFromStorage,\r\n\t\tshippingAdd: shippingAddressFromStorage,\r\n\t\tpaymentMethod: paymentMethodFromStorage,\r\n\t},\r\n\tuserLogin: { userInfo: userInfoFromStorage },\r\n};\r\n//console.log(initialState.cart.paymentMethod);\r\n\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}