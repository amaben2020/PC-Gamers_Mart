{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS, USER_REGISTER_REQUEST, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_DETAILS_REQUEST, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_DETAILS_RESET } from \"./../constants/userConstants\";\nimport axios from \"axios\";\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_LOGIN_REQUEST\n  });\n\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \" application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      email,\n      password,\n      config\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    console.log(data);\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n};\nexport const register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST\n  });\n\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \" application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users\", {\n      name,\n      email,\n      password,\n      config\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    console.log(data);\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n}; //we need to getState cos we need the userInfo (token)\n//The id below is just a parameter where we would fill in profile route, this makes us navigate to that route\n\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    }); // const userInfo = getState().userLogin.userInfo;\n    //getting the userInfo i.e Token from state so you could access the user's profile\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    console.log(userInfo);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  dispatch({\n    type: USER_UPDATE_PROFILE_REQUEST\n  });\n\n  try {\n    //getting the userInfo i.e Token from state so you could access the user's profile\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token} `\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error\n    });\n  } //where you store the token, username etc\n\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  localStorage.removeItem(\"userInfo\");\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Proshop Ecommerce/frontend/frontend/src/actions/userActions.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","USER_REGISTER_REQUEST","USER_DETAILS_FAIL","USER_DETAILS_SUCCESS","USER_DETAILS_REQUEST","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_DETAILS_RESET","axios","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","console","log","localStorage","setItem","JSON","stringify","error","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","logout","removeItem"],"mappings":"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","sourcesContent":["import {\r\n\tUSER_LOGIN_REQUEST,\r\n\tUSER_LOGIN_SUCCESS,\r\n\tUSER_LOGIN_FAIL,\r\n\tUSER_LOGOUT,\r\n\tUSER_REGISTER_FAIL,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_DETAILS_FAIL,\r\n\tUSER_DETAILS_SUCCESS,\r\n\tUSER_DETAILS_REQUEST,\r\n\tUSER_UPDATE_PROFILE_REQUEST,\r\n\tUSER_UPDATE_PROFILE_SUCCESS,\r\n\tUSER_UPDATE_PROFILE_FAIL,\r\n\tUSER_DETAILS_RESET,\r\n} from \"./../constants/userConstants\";\r\nimport axios from \"axios\";\r\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\r\nexport const login = (email, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_LOGIN_REQUEST });\r\n\ttry {\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \" application/json\",\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.post(\"/api/users/login\", {\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\tconfig,\r\n\t\t});\r\n\r\n\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\t\tconsole.log(data);\r\n\t\tlocalStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_LOGIN_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_REGISTER_REQUEST });\r\n\ttry {\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \" application/json\",\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.post(\"/api/users\", {\r\n\t\t\tname,\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\tconfig,\r\n\t\t});\r\n\r\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\t\tconsole.log(data);\r\n\t\tlocalStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_REGISTER_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\n//we need to getState cos we need the userInfo (token)\r\n//The id below is just a parameter where we would fill in profile route, this makes us navigate to that route\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_DETAILS_REQUEST });\r\n\r\n\t\t// const userInfo = getState().userLogin.userInfo;\r\n\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\t\tconsole.log(userInfo);\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.get(`/api/users/${id}`, config);\r\n\r\n\t\tdispatch({ type: USER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_DETAILS_FAIL, payload: error });\r\n\t}\r\n};\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_UPDATE_PROFILE_REQUEST });\r\n\ttry {\r\n\t\t//getting the userInfo i.e Token from state so you could access the user's profile\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token} `,\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst { data } = await axios.put(`/api/users/profile`, user, config);\r\n\r\n\t\tdispatch({ type: USER_UPDATE_PROFILE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: USER_UPDATE_PROFILE_FAIL, payload: error });\r\n\t}\r\n\t//where you store the token, username etc\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tdispatch({ type: USER_LOGOUT });\r\n\tdispatch({ type: USER_DETAILS_RESET });\r\n\tdispatch({ type: ORDER_LIST_MY_RESET });\r\n\r\n\tlocalStorage.removeItem(\"userInfo\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}